---
// Define la interfaz Props
export interface Props {
  isAdmin: boolean;
  auth: boolean;
  id?: string; // Opcional, ya que puede no estar disponible
  markers: { direccion: string; Nombre: string; TarifaHora: string; id: string }[]; // Marcadores para el mapa
}

const { isAdmin, auth, markers } = Astro.props;

// Enlaces de usuario y administrador
const userLinks = [
  { href: 'Listado?id=${id}', icon: 'fa-solid fa-car-alt', text: 'Listado de Parqueaderos' },
  { href: '/Politicas', icon: 'fa-solid fa-shield-alt', text: 'Políticas' }
];

const adminLinks = [
  { href: '/agregar-parq', icon: 'fa-solid fa-plus-circle', text: 'Agregar Parqueadero' },
  { href: '/Admin', icon: 'fa-solid fa-car-alt', text: 'Mis parqueaderos' },
  { href: '/Politicas', icon: 'fa-solid fa-shield-alt', text: 'Políticas' },
  { href: '/Perfil', icon: 'fa-solid fa-user', text: 'Perfil' }
];
---

<aside class="Sidebar fixed bottom-8 left-8 z-50 flex flex-col bg-gray-800 rounded-lg shadow-lg transition-transform transform translate-y-0 p-4">
  <div class="handle cursor-pointer text-white rounded-full absolute top-2 left-1/2 transform -translate-x-1/2 z-60">
    <div class="w-10 h-1 bg-white"></div>
  </div>

  <div id="sidebarContent" class="flex flex-col bg-gray-800 rounded-lg shadow-lg p-6 pt-5 relative overflow-y-auto max-h-[50vh] transition-transform transform translate-y-0">
    <div class="flex items-center mb-4">
      {auth && (
        <button id="logoutButton" class="text-white hover:text-gray-300 transition-colors bg-gray-700 rounded-full p-2 mr-2" onclick="logout()">
          <i class="fas fa-sign-out-alt"></i>
        </button>
      )}
      <input type="text" id="searchInput" placeholder="Buscar" class="flex-grow px-4 py-2 rounded-lg bg-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500" />
      <button id="searchButton" class="ml-2 p-2 bg-green-600 rounded-lg text-white hover:bg-green-500">
        <i class="fas fa-search"></i> <!-- Cambié a verde -->
      </button>
    </div>
    
    {!auth ? (
      <div class="flex flex-row items-center mb-2 ml-7 mt-3">
        <p class="text-lg text-white mr-2">Maneja tu parqueadero</p>
        <a href="/registro" class="text-sm text-white hover:text-gray-300 transition-colors bg-blue-500 px-4 py-1 rounded-lg flex items-center">
          <i class="fas fa-user-plus mr-2"></i> <!-- Ícono de Font Awesome para registrar -->
          Registrarse
        </a>
      </div>
    ) : null}

    <nav id="linkContainer" class="hidden flex-col items-start px-4 pt-4">
      <ul class="space-y-4">
        {(isAdmin ? adminLinks : userLinks).map(link => (
          <li class="flex items-center">
            <a href={link.href} class="flex items-center text-lg text-white hover:text-gray-300 transition-colors">
              <i class={`fas ${link.icon} mr-2`}></i>
              {link.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>
</aside>

<div id="map" class="w-full h-screen" data-markers={JSON.stringify(markers)}></div>

<script type="text/javascript">
  window.initMap = async function() {
    const mapElement = document.getElementById('map');
    if (mapElement && window.google) {
      const centroMapa = { lat: 6.2635707, lng: -75.5818526 };
      const map = new google.maps.Map(mapElement, {
        zoom: 12,
        center: centroMapa,
      });

      const { Marker } = await google.maps.importLibrary("marker");
      const geocoder = new google.maps.Geocoder();
      const markers = JSON.parse(mapElement.getAttribute('data-markers') || '[]');

      let currentInfoWindow = null;

      markers.forEach(({ direccion, Nombre, PrecioHora, id }) => {
        if (direccion) {
          geocodeAddress(direccion, Nombre, PrecioHora, id);
        }
      });

      function addMarker({ lat, lng, Nombre, direccion, PrecioHora, id }) {
        const markerIcon = {
          path: 'M12 2C8.13 2 5 5.13 5 9c0 1.29.25 2.5.71 3.57L12 22l6.29-9.43C18.75 11.5 19 10.29 19 9c0-3.87-3.13-7-7-7zm0 3c1.93 0 3.5 1.57 3.5 3.5S13.93 12 12 12s-3.5-1.57-3.5-3.5S10.07 5 12 5z',
          fillColor: '#FF6347', // Cambia el color según tus necesidades
          fillOpacity: 1,
          strokeWeight: 1,
          strokeColor: '#FFFFFF',
          scale: 1.5,
          anchor: new google.maps.Point(12, 24),
        };

        const marker = new Marker({
          position: { lat, lng },
          map,
          title: Nombre,
          icon: markerIcon
        });

        const infoWindowContent = `
          <div class="p-4 bg-white rounded-lg shadow-lg" style="margin: 2px; max-width: 250px;">
            <div class="flex justify-between items-center">
              <h2 class="text-xl font-bold text-gray-800 mb-2">${Nombre}</h2>
            </div>
            <p class="text-gray-600 mb-1">
              <i class="fas fa-map-marker-alt text-red-500 mr-2"></i>
              ${direccion}
            </p>
            <p class="text-gray-600 mb-4">
              <i class="fas fa-money-bill-wave text-green-500 mr-2"></i>
              Precio por hora: <strong>${PrecioHora}</strong>
            </p>
            <button class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-all" 
                    onclick="window.location.href='/Folleto?id=${id}'">
              <i class="fas fa-info-circle mr-2"></i> Ver detalles
            </button>
          </div>
        `;

        const infoWindow = new google.maps.InfoWindow({
          content: infoWindowContent,
        });

        marker.addListener('click', () => {
          if (currentInfoWindow) {
            currentInfoWindow.close();
          }
          infoWindow.open(map, marker);
          currentInfoWindow = infoWindow;
        });
      }

      function geocodeAddress(address, Nombre, PrecioHora, id) {
        geocoder.geocode({ address }, (results, status) => {
          if (status === 'OK' && results[0]) {
            const location = results[0].geometry.location;
            addMarker({
              lat: location.lat(),
              lng: location.lng(),
              Nombre,
              direccion: address,
              PrecioHora,
              id,
            });
          } else {
            console.error(`Geocoding failed for address: ${address}, status: ${status}`);
          }
        });
      }

      const searchAndZoom = (address) => {
        geocoder.geocode({ address }, (results, status) => {
          if (status === 'OK' && results[0]) {
            const location = results[0].geometry.location;
            map.setCenter(location);
            map.setZoom(14);
          } else {
            console.error(`Geocoding failed for address: ${address}, status: ${status}`);
          }
        });
      };

      const input = document.getElementById('searchInput');
      const autocomplete = new google.maps.places.Autocomplete(input);
      autocomplete.setFields(['place_id', 'name']);

      autocomplete.addListener('place_changed', () => {
        const place = autocomplete.getPlace();
        if (place.geometry) {
          searchAndZoom(place.name);
        }
      });

      document.getElementById('searchButton').addEventListener('click', () => {
        const address = input.value;
        if (address) {
          searchAndZoom(address);
        }
      });
    } else {
      console.error('Google Maps API not loaded or map element not found.');
    }
  };

  function logout() {
  fetch('http://localhost:2402/api/login/logout', {
    method: 'POST',
    credentials: 'include' // Para enviar cookies junto con la solicitud
  })
  .then(response => {
    if (response.ok) {
      localStorage.removeItem('jwt_token');
      localStorage.removeItem('userData'); // Eliminar userData del localStorage
      window.location.href = '/';
    } else {
      console.error('Error al cerrar sesión');
    }
  })
  .catch(error => console.error('Error en la solicitud:', error));
}

  document.addEventListener("DOMContentLoaded", () => {
    const handle = document.querySelector('.handle');
    const sidebar = document.querySelector('.Sidebar');
    const linkContainer = document.getElementById('linkContainer');

    if (handle && sidebar) {
      handle.addEventListener('click', () => {
        sidebar.classList.toggle('translate-y-0');
        linkContainer.classList.toggle('hidden');
      });
    }
  });
</script>

<style>
  .Sidebar {
    background-color: #1c2222;
    border-radius: 0.5rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
    padding: 1rem;
    transition: transform 0.3s ease-in-out;
    width: 100%;
    max-width: 27rem;
    bottom: 0;
    position: fixed;
    left: 0;
  }

  #sidebarContent {
    width: 100%;
  }

  .handle {
    top: 1rem;
    z-index: 60;
    cursor: pointer;
  }

  #sidebarContent::-webkit-scrollbar {
    width: 8px;
  }

  #sidebarContent::-webkit-scrollbar-thumb {
    background-color: rgba(255, 255, 255, 0.3);
    border-radius: 10px;
  }

  #sidebarContent::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.1);
    border-radius: 10px;
  }

  #map {
    height: 100vh;
    width: 100%;
  }

  .Sidebar.hidden {
    display: none;
  }
</style>
